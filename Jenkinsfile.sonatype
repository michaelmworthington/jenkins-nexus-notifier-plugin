/*
 * Copyright (c) 2018-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/nexus/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
@Library(['ci-pipeline-library', 'jenkins-shared']) _
import com.sonatype.jenkins.pipeline.GitHub
import com.sonatype.jenkins.pipeline.OsTools

properties([
    parameters([
        booleanParam(defaultValue: false, description: 'Release Java API', name: 'isRelease')
    ])
])

String apiToken = null
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'integrations-github-api',
                  usernameVariable: 'GITHUB_API_USERNAME', passwordVariable: 'GITHUB_API_PASSWORD']]) {
  apiToken = env.GITHUB_API_PASSWORD
}

GitHub gitHub = new GitHub(this, 'sonatype/jenkins-nexus-notifier-plugin', apiToken)
Closure postHandler = {
  currentBuild, env ->
    def commitId = OsTools.runSafe(this, 'git rev-parse HEAD')
    if (currentBuild.currentResult == 'SUCCESS') {
      gitHub.statusUpdate commitId, 'success', 'CI', 'CI Passed'
    }
    else {
      gitHub.statusUpdate commitId, 'failure', 'CI', 'CI Failed'
    }
}

Closure iqPolicyEvaluation = {
  stage ->
    def commitId = OsTools.runSafe(this, 'git rev-parse HEAD')
    gitHub.statusUpdate commitId, 'pending', 'analysis', 'Nexus Lifecycle Analysis Running'

    try {
      def evaluation = nexusPolicyEvaluation failBuildOnNetworkError: false,
          iqApplication: 'nexus-jenkins-notifier-plugin',
          iqScanPatterns: [[scanPattern: 'nexus-jenkins-notifier-plugin.hpi']],
          iqStage: 'build',
          jobCredentialsId: ''
      gitHub.statusUpdate commitId, 'success', 'analysis', 'Nexus Lifecycle Analysis Succeeded', "${evaluation.applicationCompositionReportUrl}"
    }
    catch (error) {
      def evaluation = error.policyEvaluation
      gitHub.statusUpdate commitId, 'failure', 'analysis', 'Nexus Lifecycle Analysis Failed', "${evaluation.applicationCompositionReportUrl}"
      throw error
    }
}

if (!params.isRelease) {
  mavenSnapshotPipeline(
      notificationSender: postHandler,
      iqPolicyEvaluation: iqPolicyEvaluation
  )
  return
} else {
  node('ubuntu-zion') {
    def commitId, commitDate, pom, version

    try {
      stage('Preparation') {
        deleteDir()

        checkout scm

        commitId = OsTools.runSafe(this, 'git rev-parse HEAD')
        commitDate = OsTools.runSafe(this, "git show -s --format=%cd --date=format:%Y%m%d-%H%M%S ${commitId}")

        OsTools.runSafe(this, 'git config --global user.email sonatype-ci@sonatype.com')
        OsTools.runSafe(this, 'git config --global user.name Sonatype CI')

        pom = readMavenPom file: 'pom.xml'
        version = pom.version.replace("-SNAPSHOT", ".${commitDate}.${commitId.substring(0, 7)}")

        currentBuild.displayName = "#${currentBuild.number} - ${version}"
      }
      stage('License Check') {
        withMaven(jdk: 'JDK8u121', maven: 'M3', mavenSettingsConfig: 'jenkins-settings.xml') {
          OsTools.runSafe(this, 'mvn license:check')
        }
      }
      stage('Build') {
        withMaven(jdk: 'JDK8u121', maven: 'M3', mavenSettingsConfig: 'jenkins-settings.xml') {
          OsTools.runSafe(this, 'mvn clean package')
        }
      }
      stage('Nexus Lifecycle Analysis') {
        iqPolicyEvaluation('release')
      }
      stage('Archive Results') {
        junit '**/target/surefire-reports/TEST-*.xml'
        archive 'target/*.hpi'
      }
    }
    finally {
      postHandler(env, currentBuild)
    }
    if (currentBuild.result == 'FAILURE') {
      return
    }
    // Disabled for branch testing
//    if (scm.branches[0].name != '*/master')
//    {
//      return
//    }
    stage('Deploy to Sonatype') {
      withGpgCredentials('gnupg') {
        withMaven(jdk: 'JDK8u121', maven: 'M3', mavenSettingsConfig: 'public-settings.xml') {
          OsTools.runSafe(this, "mvn -Psonatype -Darguments=-DskipTests -DreleaseVersion=${version} -DdevelopmentVersion=${pom.version} -DpushChanges=false -DlocalCheckout=true -DpreparationGoals=initialize release:prepare release:perform -B")
        }
      }
    }
    input 'Push tags and release to GitHub?'
    stage('Push tags') {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'integrations-github-api',
                        usernameVariable: 'GITHUB_API_USERNAME', passwordVariable: 'GITHUB_API_PASSWORD']]) {
        OsTools.runSafe(this,
            "git push https://${env.GITHUB_API_USERNAME}:${env.GITHUB_API_PASSWORD}@github.com/sonatype/jenkins-nexus-notifier-plugin.git ${pom.artifactId}-${version}")
      }
      def releasePayload = """{
          "tag_name": "${pom.artifactId}-${version}",
          "name": "${pom.artifactId}-${version}",
          "body": "Release ${pom.artifactId}-${version}"
      }"""
      def releaseResponse = httpRequest acceptType: 'APPLICATION_JSON',
          authentication: 'integrations-github-api',
          contentType: 'APPLICATION_JSON',
          httpMode: 'POST',
          requestBody: releasePayload,
          url: 'https://api.github.com/repos/sonatype/jenkins-nexus-notifier-plugin/releases'
      def releaseResponseContents = readJSON text: releaseResponse.content
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'integrations-github-api',
                        usernameVariable: 'GITHUB_API_USERNAME', passwordVariable: 'GITHUB_API_PASSWORD']]) {
        OsTools.runSafe(this, """
          curl --header "Content-Type:application/octet-stream" \\
            --data-binary @${WORKSPACE}/target/${pom.artifactId}.hpi \\
            --user ${env.GITHUB_API_USERNAME}:${env.GITHUB_API_PASSWORD} \\
            ${releaseResponseContents.upload_url}name=${pom.artifactId}-${version}.hpi
        """)
      }

      // Reset all changes to local repository made by the Maven release plugin
      OsTools.runSafe(this, "git tag -d ${pom.artifactId}-${version}")
      OsTools.runSafe(this, 'git clean -f && git reset --hard origin/master')
    }
  }
}
